# -*- coding: utf-8 -*-
"""analise_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17CR6djmFu0dilxqeOfmIuRTjBlG2R6c3

# Desafio Técnico - Cientista de Dados Júnior
## Escritório de Dados - Prefeitura do Rio de Janeiro
#### Makalister Andrade da Silva
"""

!pip install basedosdados sqlalchemy pandas
import basedosdados as bd
import pandas as pd
from sqlalchemy import create_engine
from google.cloud import bigquery

"""### Todas as consultas foram realizadas no dia 11/02/2024, e portanto seus resultados devem levar em consideração o conteúdo do banco de dados nesta data

### Importando tabelas e salvando-as em dataframes

#### Importando a tabela de Chamados e salvando em dataframe para uso posterior
"""

query_chamados = "SELECT * FROM `datario.administracao_servicos_publicos.chamado_1746` WHERE data_inicio BETWEEN '2023-04-01T00:00:00' AND '2023-04-01T23:59:59'"
df_chamados = bd.read_sql(query_chamados, billing_project_id="emd-datario")

"""#### Consultando e armazenando os dados de ``bairro`` em um dataframe:"""

query_bairros = "SELECT * FROM `datario.dados_mestres.bairro`"
df_bairros = bd.read_sql(query_bairros, billing_project_id="emd-datario")

"""#### Importando a tabela de Ocupação Hoteleira em Grandes Eventos no Rio"""

query_eventos = "SELECT * FROM `datario.turismo_fluxo_visitantes.rede_hoteleira_ocupacao_eventos`"
df_eventos = bd.read_sql(query_eventos, billing_project_id="emd-datario")

"""### Questão 1

Quantos chamados foram abertos no dia 01/04/2023?
"""

query_conta_chamados = "SELECT count(id_chamado) AS QTD_Chamados FROM `datario.administracao_servicos_publicos.chamado_1746` WHERE data_inicio BETWEEN '2023-04-01T00:00:00' AND '2023-04-01T23:59:59'"
df_conta_chamados = bd.read_sql(query_conta_chamados, billing_project_id="emd-datario")

df_conta_chamados

"""``Resposta:`` Foram feitos 73 chamados no dia 01/04/2023.

### Questão 2

Qual o tipo de chamado que teve mais reclamações no dia 01/04/2023?

Listando as colunas do dataframe para identificação visual:
"""

sorted(df_chamados.keys())

"""A coluna ``'tipo'`` conterá a informação para responder esta questão."""

df_chamados['tipo'].value_counts()

"""``Resposta:`` Podemos verificar que o tipo de chamado mais frequente no dia 01/04/2023 é ``Poluição sonora``, contendo 24 chamados

### Questão 3

Quais os nomes dos 3 bairros que mais tiveram chamados abertos nesse dia?

Contando os bairros (``'id_bairro'``) que mais se repetem entre os chamados:
"""

id_bairros_max_chamados = df_chamados['id_bairro'].value_counts().nlargest(3).index.tolist()
id_bairros_max_chamados

bairros_max_chamados = df_bairros.loc[df_bairros['id_bairro'].isin(id_bairros_max_chamados)]['nome'].tolist()
bairros_max_chamados

"""``Resposta:`` Os bairros que mais possuem chamados  são: ``'Leblon'``, ``'Engenho de Dentro'``, ``'Campo Grande'``, no dia 01/04/2023

### Questão 4

Qual o nome da subprefeitura com mais chamados abertos nesse dia?
"""

subprefeitura_max_chamados = df_bairros.loc[df_bairros['id_bairro'].isin([id_bairros_max_chamados[0]])]['subprefeitura'].tolist()
subprefeitura_max_chamados

"""``Resposta:`` A subprefeitura com maior número de chamados no dia 01/04/2023 foi a da ``'Zona Norte'``

### Questão 5

Existe algum chamado aberto nesse dia que não foi associado a um bairro ou subprefeitura na tabela de bairros? Se sim, por que isso acontece?
"""

chamados_sem_b_sub = df_chamados[df_chamados['id_bairro'].isna()].to_dict()
{'tipo': chamados_sem_b_sub['tipo'][0],'subtipo': chamados_sem_b_sub['subtipo'][0]}

"""``Resposta:`` O chamado não foi associado a um bairro ou subprefeitura pois o registro é sobre  ``'Verificação de ar condicionado inoperante no ônibus'``, logo não fora atribuído a nenhuma localidade.

### Questão 6

Quantos chamados com o subtipo "Perturbação do sossego" foram abertos desde 01/01/2022 até 31/12/2023 (incluindo extremidades)?
"""

total_chamados_perturbacao_sossego = df_chamados[(df_chamados['subtipo'] == 'Perturbação do sossego') &
                                                 (df_chamados['data_inicio'] >= '2022-01-01') &
                                                 (df_chamados['data_inicio'] <= '2023-12-31')].shape[0]

total_chamados_perturbacao_sossego

"""``Resposta:`` Foram feitos 24 chamados relacionados a ``'Pertubação do sossego'``.

### Questão 7

Selecione os chamados com esse subtipo que foram abertos durante os eventos contidos na tabela de eventos (Reveillon, Carnaval e Rock in Rio).
"""

# Sua consulta SQL atualizada
# Retorna contagem de eventos agrupaos por eventos
query_tot_eventos = """
SELECT e.evento, COUNT(c.id_chamado) AS total_ocorrencias
FROM `datario.administracao_servicos_publicos.chamado_1746` c
INNER JOIN `datario.turismo_fluxo_visitantes.rede_hoteleira_ocupacao_eventos` e
ON c.data_inicio BETWEEN e.data_inicial AND e.data_final
WHERE c.subtipo = 'Perturbação do sossego'
AND e.evento IN ('Reveillon', 'Carnaval', 'Rock in Rio')
GROUP BY e.evento
ORDER BY total_ocorrencias DESC;
"""
query_select_eventos = """
SELECT c.*
FROM `datario.administracao_servicos_publicos.chamado_1746` c
INNER JOIN `datario.turismo_fluxo_visitantes.rede_hoteleira_ocupacao_eventos` e
ON c.data_inicio BETWEEN e.data_inicial AND e.data_final
WHERE c.subtipo = 'Perturbação do sossego'
AND e.evento IN ('Reveillon', 'Carnaval', 'Rock in Rio')
;
"""
client = bigquery.Client(project="emd-datario")

# Executa a consulta atualizada e converte os resultados para um DataFrame
df_tot = client.query(query_tot_eventos).to_dataframe()
df_select = client.query(query_select_eventos).to_dataframe()

# Exibe o DataFrame
print(df_tot)
print('\n')
print(df_select)

"""``Resposta:``

1.   Rock in Rio 518
2.   Carnaval 197
3.   Reveillon 79.

### Questão 8

Quantos chamados desse subtipo foram abertos em cada evento??
"""

query_chamados_eventos = """
SELECT e.evento, COUNT(c.id_chamado) AS total_ocorrencias
FROM `datario.administracao_servicos_publicos.chamado_1746` c
INNER JOIN `datario.turismo_fluxo_visitantes.rede_hoteleira_ocupacao_eventos` e
ON c.data_inicio BETWEEN e.data_inicial AND e.data_final
WHERE c.subtipo = 'Perturbação do sossego'
AND e.evento IN ('Reveillon', 'Carnaval', 'Rock in Rio')
GROUP BY e.evento
ORDER BY total_ocorrencias DESC;
"""
client = bigquery.Client(project="emd-datario")


df_chamados_eventos = client.query(query_chamados_eventos).to_dataframe()

print(df_chamados_eventos)

"""``Resposta:``

1.   Rock in Rio 518 chamados
2.   Carnaval 197 chamados
3.   Reveillon 79 chamados.

### Questão 9

Qual evento teve a maior média diária de chamados abertos desse subtipo?
"""

query_medias_diarias ="""SELECT evento AS Evento, ROUND(AVG(QTD_Chamados), 4) AS Media_Diaria_Chamados
FROM (
    SELECT e.evento, DATE(c.data_inicio) AS data, COUNT(*) AS QTD_Chamados
    FROM `datario.administracao_servicos_publicos.chamado_1746` c
    INNER JOIN `datario.turismo_fluxo_visitantes.rede_hoteleira_ocupacao_eventos` e
    ON c.data_inicio BETWEEN e.data_inicial AND e.data_final
    WHERE c.subtipo = 'Perturbação do sossego'
    GROUP BY e.evento, DATE(c.data_inicio)
) AS subquery
GROUP BY evento
ORDER BY Media_Diaria_Chamados DESC
"""

client = bigquery.Client(project="emd-datario")

df_select = client.query(query_medias_diarias).to_dataframe()

max_evento = df_select.loc[df_select['Media_Diaria_Chamados'].idxmax()]

print(max_evento)

"""``Resposta:`` Rock in Rio com a média diária  de 103.6 chamados

### Questão 10

Compare as médias diárias de chamados abertos desse subtipo durante os eventos específicos (Reveillon, Carnaval e Rock in Rio) e a média diária de chamados abertos desse subtipo considerando todo o período de 01/01/2022 até 31/12/2023.
"""

query_medias_especificos ="""
SELECT evento AS Evento, ROUND(AVG(QTD_Chamados), 2) AS Media_Diaria_Chamados
FROM (
    SELECT e.evento, DATE(c.data_inicio) AS data, COUNT(*) AS QTD_Chamados
    FROM `datario.administracao_servicos_publicos.chamado_1746` c
    INNER JOIN `datario.turismo_fluxo_visitantes.rede_hoteleira_ocupacao_eventos` e
    ON c.data_inicio BETWEEN e.data_inicial AND e.data_final
    WHERE c.subtipo = 'Perturbação do sossego'
    GROUP BY e.evento, DATE(c.data_inicio)
) AS subquery
GROUP BY evento
ORDER BY Media_Diaria_Chamados DESC
"""
query_medias_totais ="""
SELECT ROUND(AVG(QTD_Chamados), 2) AS Media_Diaria_Eventos
FROM (
    SELECT DATE(c.data_inicio) AS data, COUNT(*) AS QTD_Chamados
    FROM `datario.administracao_servicos_publicos.chamado_1746` c
    WHERE c.subtipo = 'Perturbação do sossego'
    AND c.data_inicio BETWEEN '2022-01-01' AND '2023-12-31'
    GROUP BY DATE(c.data_inicio)
) AS subquery
"""

client = bigquery.Client(project="emd-datario")

df_select_especificos = client.query(query_medias_especificos).to_dataframe()
df_select_totais = client.query(query_medias_totais).to_dataframe()

print(df_select_especificos)
print('\n')
print(df_select_totais)

"""``Resposta:``

1.   Rock in Rio 103.6 média diária de chamados
2.   Carnaval 65.67 média diária de chamados
3.   Reveillon 39.50 média diária de chamados.
4.   Entre 01/01/2022 e 31/12/2023 a média diária de chamados foi 63.2.
"""